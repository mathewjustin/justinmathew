[{"content":"‡¥é‡¥®‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥™‡¥≤‡¥™‡µç‡¥™‡µã‡¥¥‡µÅ‡¥Ç ‡¥§‡µã‡¥®‡µç‡¥®‡¥ø‡¥Ø‡¥ø‡¥ü‡µç‡¥ü‡µÅ‡¥£‡µç‡¥ü‡µç ‡¥®‡¥Æ‡µç‡¥Æ‡µÅ‡¥ü‡µÜ ‡¥è‡¥§‡µÅ ‡¥≠‡¥æ‡¥∑‡¥Ø‡¥ø‡¥≤‡¥æ‡¥£‡µç ‡¥®‡¥Æ‡µç‡¥Æ‡¥≥‡µÅ‡¥ü‡µÜ ‡¥¨‡µç‡¥∞‡µÜ‡¥Ø‡¥ø‡µª ‡¥™‡µç‡¥∞‡¥µ‡µº‡¥§‡µç‡¥§‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡µç ‡¥é‡¥®‡µç‡¥®‡µç. ‡¥á‡¥®‡µç‡¥±‡µº‡¥®‡µÜ‡¥±‡µç‡¥±‡¥ø‡µΩ ‡¥™‡¥∞‡¥§‡µÅ‡¥Æ‡µç‡¥™‡µã‡µæ ‡¥®‡¥Æ‡µç‡¥Æ‡µÅ‡¥ï‡µç‡¥ï‡µç ‡¥Æ‡¥®‡¥∏‡¥ø‡¥≤‡¥æ‡¥ï‡µÅ‡¥Ç ‡¥¨‡µç‡¥∞‡µÜ‡¥Ø‡¥ø‡µª symbols ‡¥â‡¥Ç ‡¥Æ‡µã‡¥°‡¥≤‡µÅ‡¥ï‡¥≥‡µÅ‡¥Ç ‡¥Ü‡¥£‡µç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡µç ‡¥é‡¥®‡µç‡¥®‡µç.¬†‡¥™‡¥ï‡µç‡¥∑‡µÜ ‡¥í‡¥∞‡µÅ ‡¥™‡µç‡¥∞‡µã‡¥¨‡µç‡¥≤‡¥Ç ‡¥∏‡µã‡µæ‡¥µ‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥Æ‡µç‡¥™‡µã‡µæ ‡¥®‡¥Æ‡µç‡¥Æ‡µÅ‡¥ü‡µÜ ‡¥¨‡µç‡¥∞‡µÜ‡¥Ø‡¥ø‡µª ‡¥ï‡µÇ‡¥ü‡µÅ‡¥§‡µΩ ‡¥∏‡¥Æ‡¥Ø‡¥µ‡µÅ‡¥Ç ‡¥ö‡¥ø‡¥≤‡¥µ‡¥¥‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡µç ‡¥ê‡¥°‡¥ø‡¥Ø‡¥ï‡¥≥‡µÜ ‡¥™‡¥∞‡¥ø‡¥≠‡¥æ‡¥∑ ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡µª ‡¥Ü‡¥Ø‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥Ç. ‡¥™‡µç‡¥∞‡¥§‡µç‡¥Ø‡µá‡¥ï‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥æ‡¥Ø‡¥ø ‡¥Ü‡¥Ø ‡¥é‡¥®‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥á‡¥§‡µä‡¥∞‡µÅ ‡¥™‡µç‡¥∞‡¥∂‡µç‡¥®‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥§‡µã‡¥®‡µç‡¥®‡¥ø‡¥Ø‡¥ø‡¥ü‡µç‡¥ü‡µÅ‡¥£‡µç. ‡¥ö‡¥ø‡¥≤ ‡¥™‡µç‡¥∞‡µã‡¥¨‡µç‡¥≤‡µÜ‡¥Ç‡¥∏‡µç ‡¥∏‡µã‡µæ‡¥µ‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥Æ‡µç‡¥™‡µã‡µæ ‡¥é‡¥®‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥ï‡µÇ‡¥ü‡µÅ‡¥§‡µΩ ‡¥µ‡¥¥‡¥ô‡µç‡¥ô‡µÅ‡¥®‡µç‡¥® ‡¥≠‡¥æ‡¥∑ ‡¥Ö‡¥§‡µç ‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç ‡¥Ü‡¥£‡µç.\n‡¥â‡¥¶‡¥æ‡¥π‡¥∞‡¥£‡¥§‡µç‡¥§‡¥ø‡¥®‡µç ‡¥à ‡¥™‡µç‡¥∞‡µã‡¥¨‡µç‡¥≤‡¥Ç ‡¥®‡µã‡¥ï‡µç‡¥ï‡µÇ. Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining. If you look at Leetcode explanation the language barrier will become very evident in finding a solution to this problem. ‡¥®‡¥Æ‡µÅ‡¥ï‡µç‡¥ï‡µç ‡¥í‡¥∞‡µÅ height array ‡¥ï‡µä‡¥ü‡µÅ‡¥§‡µç‡¥§‡¥ø‡¥ü‡µç‡¥ü‡µÅ‡¥£‡µç‡¥ü‡µç: [0,1,0,2,1,0,1,3,2,1,2,1] ‡¥à each number ‡¥í‡¥∞‡µÅ bar ‡¥Ü‡¥£‡µÜ‡¥®‡µç‡¥®‡µç ‡¥ö‡¥ø‡¥®‡µç‡¥§‡¥ø‡¥ï‡µç‡¥ï‡µÇ. ‡¥Æ‡¥¥ ‡¥ï‡¥¥‡¥ø‡¥û‡µç‡¥û‡¥∂‡µá‡¥∑‡¥Ç ‡¥é‡¥§‡µç‡¥∞ units ‡¥µ‡µÜ‡¥≥‡µç‡¥≥‡¥Ç ‡¥à structure trap ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡¥Æ‡µÜ‡¥®‡µç‡¥®‡µç ‡¥ï‡¥æ‡¥£‡¥£‡¥Ç.\nüß† ‡¥Ö‡¥ü‡¥ø‡¥∏‡µç‡¥•‡¥æ‡¥® ‡¥Ü‡¥∂‡¥Ø‡¥Ç:¬†‡¥í‡¥∞‡µÅ position-‡µΩ ‡¥µ‡µÜ‡¥≥‡µç‡¥≥‡¥Ç trap ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡µª ‡¥ï‡¥¥‡¥ø‡¥Ø‡µÅ‡¥®‡µç‡¥® ‡¥Ö‡¥≥‡¥µ‡µç = min(Left-‡µΩ ‡¥ï‡¥æ‡¥£‡µÅ‡¥®‡µç‡¥® ‡¥è‡¥±‡µç‡¥±‡¥µ‡µÅ‡¥Ç ‡¥µ‡¥≤‡¥ø‡¥Ø wall, Right-‡µΩ ‡¥ï‡¥æ‡¥£‡µÅ‡¥®‡µç‡¥® ‡¥è‡¥±‡µç‡¥±‡¥µ‡µÅ‡¥Ç ‡¥µ‡¥≤‡¥ø‡¥Ø wall) - height[i] ‡¥í‡¥∞‡µÅ ‡¥™‡µä‡¥∏‡¥ø‡¥∑‡¥®‡¥ø‡µΩ ‡¥µ‡µÜ‡¥≥‡µç‡¥≥‡¥Ç ‡¥®‡¥ø‡¥±‡¥Ø‡¥£‡¥Æ‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ ‡¥Ö‡¥§‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥á‡¥ü‡¥§‡µç‡¥§‡µá‡¥Ø‡µÅ‡¥Ç ‡¥µ‡¥≤‡¥§‡µç‡¥§‡µá‡¥Ø‡µÅ‡¥Ç ‡¥µ‡¥æ‡¥≥‡µÅ‡¥ï‡¥≥‡µÅ‡¥ü‡µÜ ‡¥á‡¥ü‡¥Ø‡¥ø‡µΩ ‡¥Ü‡¥Ø‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡¥£‡¥Ç. ‡¥â‡¥¶‡¥æ‡¥π‡¥∞‡¥£‡¥§‡µç‡¥§‡¥ø‡¥®‡µç ‡¥á‡¥ü‡¥§‡µÅ ‡¥µ‡¥∂‡¥§‡µç‡¥§‡µÜ‡¥Ø‡µã ‡¥µ‡¥≤‡¥§‡µÅ ‡¥µ‡¥∂‡¥§‡µç‡¥§‡µÜ‡¥Ø‡µã ‡¥µ‡¥æ‡µæ ‡¥µ‡¥≤‡µÅ‡¥§‡¥æ‡¥Ø‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡¥£‡¥Ç.\n‡¥á‡¥ü‡¥§‡µÅ ‡¥µ‡¥∂‡¥§‡µç‡¥§‡µÜ ‡¥µ‡¥æ‡¥≥‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥â‡¥Ø‡¥∞‡¥Ç ‡¥∞‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥µ‡¥≤‡¥§‡µÅ ‡¥µ‡¥∂‡¥§‡µç‡¥§‡µÜ ‡¥µ‡¥æ‡¥≥‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥â‡¥Ø‡¥∞‡¥Ç ‡¥Æ‡µÇ‡¥®‡µç‡¥®‡µÅ‡¥Ç ‡¥®‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µç ‡¥®‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥® ‡¥µ‡¥æ‡¥≥‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥â‡¥Ø‡¥∞‡¥Ç ‡¥í‡¥®‡µç‡¥®‡µÅ‡¥Ç ‡¥Ü‡¥£‡µÜ‡¥®‡µç‡¥®‡µç ‡¥∏‡¥ô‡µç‡¥ï‡¥≤‡µç‡¥™‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï. ‡¥Ö‡¥™‡µç‡¥™‡µã‡µæ ‡¥®‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µç ‡¥®‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥® ‡¥≠‡¥ø‡¥§‡µç‡¥§‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥í‡¥∞‡µÅ ‡¥Ø‡µÇ‡¥£‡¥ø‡¥±‡µç‡¥±‡µç ‡¥π‡µã‡µæ‡¥°‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡µª ‡¥™‡¥±‡µç‡¥±‡µÅ‡¥Ç. ‡¥Ö‡¥§‡¥æ‡¥Ø‡¥§‡µç min(Left-‡µΩ ‡¥ï‡¥æ‡¥£‡µÅ‡¥®‡µç‡¥® ‡¥è‡¥±‡µç‡¥±‡¥µ‡µÅ‡¥Ç ‡¥µ‡¥≤‡¥ø‡¥Ø wall, Right-‡µΩ ‡¥ï‡¥æ‡¥£‡µÅ‡¥®‡µç‡¥® ‡¥è‡¥±‡µç‡¥±‡¥µ‡µÅ‡¥Ç ‡¥µ‡¥≤‡¥ø‡¥Ø wall) - height[i] ‡¥®‡¥Æ‡µç‡¥Æ‡µæ ‡¥é‡¥µ‡¥ø‡¥ü‡µÜ‡¥Ø‡¥æ‡¥£‡µã ‡¥®‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡µç ‡¥Ü ‡¥µ‡¥æ‡¥≥‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥â‡¥Ø‡¥∞‡¥Ç ‡¥Ö‡¥§‡¥ø‡µΩ ‡¥®‡¥ø‡¥®‡µç‡¥®‡µÅ‡¥Ç ‡¥ï‡µÅ‡¥±‡¥ï‡µç‡¥ï‡µá‡¥£‡µç‡¥ü‡¥ø‡¥Ø‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ.¬†‡¥ö‡µÜ‡¥±‡¥ø‡¥Ø ‡¥Æ‡¥§‡¥ø‡¥≤‡¥æ‡¥£‡µç ‡¥µ‡µÜ‡¥≥‡µç‡¥≥‡¥§‡µç‡¥§‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥§‡¥ü‡¥û‡µç‡¥û‡µÅ ‡¥®‡¥ø‡µº‡¥§‡µç‡¥§‡µÅ‡¥®‡µç‡¥®‡¥§‡µç. ‡¥Ö‡¥§‡¥ø‡¥®‡µÜ ‡¥¨‡µá‡¥∏‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥§‡¥æ‡µΩ ‡¥®‡¥Æ‡µç‡¥Æ‡µÅ‡¥ï‡µç‡¥ï‡µç ‡¥µ‡¥≥‡¥∞‡µÜ ‡¥é‡¥≥‡µÅ‡¥™‡µç‡¥™‡¥§‡µç‡¥§‡¥ø‡µΩ ‡¥á‡¥§‡¥ø‡¥®‡µä‡¥∞‡µÅ ‡¥®‡¥≤‡µç‡¥≤ ‡¥∏‡µä‡¥≤‡µç‡¥Ø‡µÇ‡¥∑‡µª ‡¥ï‡¥£‡µç‡¥ü‡µÅ‡¥™‡¥ø‡¥ü‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥™‡¥±‡µç‡¥±‡µÅ‡¥Ç.\nüéØ ‡¥í‡¥±‡µç‡¥±‡¥µ‡¥æ‡¥ï‡µç‡¥ï‡¥ø‡µΩ ‡¥™‡¥±‡¥û‡µç‡¥û‡¥æ‡µΩ:\n‡¥í‡¥∞‡µÅ ‡¥µ‡¥∂‡¥§‡µç‡¥§‡µç ‡¥µ‡¥≤‡¥ø‡¥Ø ‡¥Æ‡¥§‡¥ø‡µΩ ‡¥â‡¥£‡µç‡¥ü‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ, ‡¥®‡¥Æ‡µç‡¥Æ‡µæ ‡¥ö‡µÜ‡¥±‡¥ø‡¥Ø ‡¥µ‡¥æ‡¥≥‡¥ø‡µΩ ‡¥®‡¥ø‡¥®‡µç‡¥®‡µÅ‡¥Ç ‡¥Ö‡¥§‡¥ø‡¥≤‡µá‡¥ï‡µç‡¥ï‡µç ‡¥®‡µÄ‡¥ô‡µç‡¥ô‡¥ø‡¥ï‡µä‡¥£‡µç‡¥ü‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï. ‡¥®‡µÄ‡¥ô‡µç‡¥ô‡µÅ‡¥®‡µç‡¥® ‡¥µ‡¥¥‡¥ø‡¥ï‡µç‡¥ï‡µç calculation ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï. ‡¥ì‡µº‡¥ï‡µç‡¥ï‡µÅ‡¥ï ‡¥í‡¥∞‡µÅ ‡¥ö‡µÜ‡¥±‡¥ø‡¥Ø ‡¥Æ‡¥§‡¥ø‡¥≤‡¥ø‡¥®‡µÅ ‡¥Æ‡¥æ‡¥§‡µç‡¥∞‡¥Æ‡µá ‡¥µ‡µÜ‡¥≥‡µç‡¥≥‡¥Ç ‡¥§‡¥ü‡¥Ø‡¥æ‡µª ‡¥™‡¥±‡µç‡¥±‡µÅ‡¥ï‡¥Ø‡µÅ‡¥≥‡µç‡¥≥‡µÅ.\n‡¥∞‡¥£‡µç‡¥ü‡µÅ ‡¥™‡µã‡¥Ø‡¥ø‡¥®‡µç‡¥±‡µº ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ö‡µç ‡¥á‡¥§‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥Æ‡µç‡¥™‡µã‡µæ ‡¥®‡¥Æ‡µç‡¥Æ‡µÅ‡¥ï‡µç ‡¥í‡¥∞‡µÅ ‡¥ó‡µç‡¥Ø‡¥æ‡¥∞‡¥£‡µç‡¥ü‡¥ø ‡¥ï‡¥ø‡¥ü‡µç‡¥ü‡µÅ‡¥Ç ‡¥Ö‡¥§‡¥æ‡¥Ø‡¥§‡µç ‡¥í‡¥∞‡µÅ‡¥µ‡¥∂‡¥§‡µç‡¥§‡µç ‡¥µ‡¥≤‡¥ø‡¥Ø ‡¥Æ‡¥§‡¥ø‡µΩ ‡¥â‡¥±‡¥™‡µç‡¥™‡¥æ‡¥Ø‡¥ø‡¥ü‡µç‡¥ü‡µç ‡¥ï‡¥æ‡¥£‡µÅ‡¥Æ‡µç‡¥™‡µã‡µæ, ‡¥Æ‡¥±‡µç‡¥±‡µá ‡¥µ‡¥∂‡¥Ç ‡¥µ‡µÜ‡¥±‡µÅ‡¥Ç limit ‡¥Ü‡¥£‡µç. ‡¥ï‡µã‡¥°‡¥ø‡¥≤‡µÜ ‡¥Ü‡¥¶‡µç‡¥Ø‡¥§‡µç‡¥§‡µÜ ‡¥á‡¥´‡µç ‡¥ï‡¥£‡µç‡¥ü‡¥ø‡¥∑‡µª ‡¥à ‡¥ó‡µç‡¥Ø‡¥æ‡¥∞‡¥£‡µç‡¥ü‡µÄ ‡¥®‡¥Æ‡µÅ‡¥ï‡µç‡¥ï‡µç ‡¥®‡µΩ‡¥ï‡µÅ‡¥Ç¬†if (height[left] \u0026lt; height[right]) {\n‡¥Æ‡µÅ‡¥¥‡µÅ‡¥µ‡µª ‡¥ï‡µã‡¥°‡µÅ‡¥Ç ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ‡¥ï‡µç ‡¥§‡¥æ‡¥¥‡µÜ ‡¥ï‡¥æ‡¥£‡¥æ‡¥Ç\n","permalink":"http://localhost:1313/2025/04/blog-post.html","summary":"\u003cp\u003e‡¥é‡¥®‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥™‡¥≤‡¥™‡µç‡¥™‡µã‡¥¥‡µÅ‡¥Ç ‡¥§‡µã‡¥®‡µç‡¥®‡¥ø‡¥Ø‡¥ø‡¥ü‡µç‡¥ü‡µÅ‡¥£‡µç‡¥ü‡µç ‡¥®‡¥Æ‡µç‡¥Æ‡µÅ‡¥ü‡µÜ ‡¥è‡¥§‡µÅ ‡¥≠‡¥æ‡¥∑‡¥Ø‡¥ø‡¥≤‡¥æ‡¥£‡µç ‡¥®‡¥Æ‡µç‡¥Æ‡¥≥‡µÅ‡¥ü‡µÜ ‡¥¨‡µç‡¥∞‡µÜ‡¥Ø‡¥ø‡µª ‡¥™‡µç‡¥∞‡¥µ‡µº‡¥§‡µç‡¥§‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡µç ‡¥é‡¥®‡µç‡¥®‡µç. ‡¥á‡¥®‡µç‡¥±‡µº‡¥®‡µÜ‡¥±‡µç‡¥±‡¥ø‡µΩ ‡¥™‡¥∞‡¥§‡µÅ‡¥Æ‡µç‡¥™‡µã‡µæ ‡¥®‡¥Æ‡µç‡¥Æ‡µÅ‡¥ï‡µç‡¥ï‡µç ‡¥Æ‡¥®‡¥∏‡¥ø‡¥≤‡¥æ‡¥ï‡µÅ‡¥Ç ‡¥¨‡µç‡¥∞‡µÜ‡¥Ø‡¥ø‡µª symbols ‡¥â‡¥Ç ‡¥Æ‡µã‡¥°‡¥≤‡µÅ‡¥ï‡¥≥‡µÅ‡¥Ç ‡¥Ü‡¥£‡µç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡µç ‡¥é‡¥®‡µç‡¥®‡µç.¬†\u003c/p\u003e\n\u003cp\u003e‡¥™‡¥ï‡µç‡¥∑‡µÜ ‡¥í‡¥∞‡µÅ ‡¥™‡µç‡¥∞‡µã‡¥¨‡µç‡¥≤‡¥Ç ‡¥∏‡µã‡µæ‡¥µ‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥Æ‡µç‡¥™‡µã‡µæ ‡¥®‡¥Æ‡µç‡¥Æ‡µÅ‡¥ü‡µÜ ‡¥¨‡µç‡¥∞‡µÜ‡¥Ø‡¥ø‡µª ‡¥ï‡µÇ‡¥ü‡µÅ‡¥§‡µΩ ‡¥∏‡¥Æ‡¥Ø‡¥µ‡µÅ‡¥Ç ‡¥ö‡¥ø‡¥≤‡¥µ‡¥¥‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡µç ‡¥ê‡¥°‡¥ø‡¥Ø‡¥ï‡¥≥‡µÜ ‡¥™‡¥∞‡¥ø‡¥≠‡¥æ‡¥∑ ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡µª ‡¥Ü‡¥Ø‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥Ç. ‡¥™‡µç‡¥∞‡¥§‡µç‡¥Ø‡µá‡¥ï‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥æ‡¥Ø‡¥ø ‡¥Ü‡¥Ø ‡¥é‡¥®‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥á‡¥§‡µä‡¥∞‡µÅ ‡¥™‡µç‡¥∞‡¥∂‡µç‡¥®‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥§‡µã‡¥®‡µç‡¥®‡¥ø‡¥Ø‡¥ø‡¥ü‡µç‡¥ü‡µÅ‡¥£‡µç. ‡¥ö‡¥ø‡¥≤ ‡¥™‡µç‡¥∞‡µã‡¥¨‡µç‡¥≤‡µÜ‡¥Ç‡¥∏‡µç ‡¥∏‡µã‡µæ‡¥µ‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥Æ‡µç‡¥™‡µã‡µæ ‡¥é‡¥®‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥ï‡µÇ‡¥ü‡µÅ‡¥§‡µΩ ‡¥µ‡¥¥‡¥ô‡µç‡¥ô‡µÅ‡¥®‡µç‡¥® ‡¥≠‡¥æ‡¥∑ ‡¥Ö‡¥§‡µç ‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç ‡¥Ü‡¥£‡µç.\u003c/p\u003e\n\u003cp\u003e¬†‡¥â‡¥¶‡¥æ‡¥π‡¥∞‡¥£‡¥§‡µç‡¥§‡¥ø‡¥®‡µç ‡¥à ‡¥™‡µç‡¥∞‡µã‡¥¨‡µç‡¥≤‡¥Ç ‡¥®‡µã‡¥ï‡µç‡¥ï‡µÇ. Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining. If you look at Leetcode explanation the language barrier will become very evident in finding a solution to this problem. ‡¥®‡¥Æ‡µÅ‡¥ï‡µç‡¥ï‡µç ‡¥í‡¥∞‡µÅ height array ‡¥ï‡µä‡¥ü‡µÅ‡¥§‡µç‡¥§‡¥ø‡¥ü‡µç‡¥ü‡µÅ‡¥£‡µç‡¥ü‡µç: [0,1,0,2,1,0,1,3,2,1,2,1] ‡¥à each number ‡¥í‡¥∞‡µÅ bar ‡¥Ü‡¥£‡µÜ‡¥®‡µç‡¥®‡µç ‡¥ö‡¥ø‡¥®‡µç‡¥§‡¥ø‡¥ï‡µç‡¥ï‡µÇ. ‡¥Æ‡¥¥ ‡¥ï‡¥¥‡¥ø‡¥û‡µç‡¥û‡¥∂‡µá‡¥∑‡¥Ç ‡¥é‡¥§‡µç‡¥∞ units ‡¥µ‡µÜ‡¥≥‡µç‡¥≥‡¥Ç ‡¥à structure trap ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡¥Æ‡µÜ‡¥®‡µç‡¥®‡µç ‡¥ï‡¥æ‡¥£‡¥£‡¥Ç.\u003c/p\u003e","title":"‡¥Æ‡¥ß‡µÅ‡¥∞‡¥Ç ‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç. ‡¥í‡¥∞‡µÅ ‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç ‡¥™‡µç‡¥∞‡µã‡¥¨‡µç‡¥≤‡¥Ç ‡¥∏‡µã‡µæ‡¥µ‡¥ø‡¥ô‡µç "},{"content":"Managing Concurrent Updates with Distributed Locks\nManaging Concurrent Updates with Distributed Locks In distributed systems, managing concurrent access to shared resources is crucial to ensure data consistency and prevent corruption. Let‚Äôs explore how to handle this using a Java example, starting with a basic implementation and improving it step-by-step.\nBasic Implementation Without Proper Lock Handling Here\u0026rsquo;s a simple version of a method that tries to acquire a distributed lock, perform an update, and release the lock:\npublic void updateResource() { try { // Attempt to acquire the distributed lock acquireLock(); // Perform the update operation doUpdate(); } catch (LockAcquisitionException e) { // Handle the case where the lock could not be acquired System.out.println(\u0026#34;Failed to acquire lock: \u0026#34; + e.getMessage()); } catch (Exception e) { // Handle any other exceptions that occurred during the update operation e.printStackTrace(); } finally { // Ensure the lock is released in the finally block unlock(); } } private void acquireLock() throws LockAcquisitionException { // Implement your logic to acquire a distributed lock here // Throw LockAcquisitionException if the lock cannot be acquired } private void unlock() { // Implement your logic to release the distributed lock here } private void doUpdate() { // Implement your update logic here } // Custom exception for lock acquisition failure public class LockAcquisitionException extends Exception { public LockAcquisitionException(String message) { super(message); } } What Happens with Concurrent Threads? Imagine three threads (A, B, and C) are running this method at the same time:\nThread A acquires the lock and starts updating the resource. Thread B tries to acquire the lock but fails because Thread A is holding it, so it throws an exception. Thread B incorrectly releases the lock in the finally block, it will release the lock that Thread A is still using. Thread C then acquires the lock, potentially corrupting the data if it starts updating the resource while Thread A is still working. Can We Use Synchronized Methods? In a single JVM (Java Virtual Machine), you can use the synchronized keyword to ensure only one thread can execute the method at a time:\npublic synchronized void updateResource() { try { // Perform the update operation doUpdate(); } catch (Exception e) { // Handle exceptions e.printStackTrace(); } } However, this doesn\u0026rsquo;t work in a distributed system where multiple JVM instances might be running on different servers. The synchronized keyword only works within the same JVM.\nThe Lost Update Problem The \u0026ldquo;lost update\u0026rdquo; problem occurs when multiple threads read the same data, modify it, and write it back, overwriting each other\u0026rsquo;s changes. For example, if Thread A reads a value and then Thread B reads the same value, both might update the value and save it, resulting in one of the updates being lost.\nProper Lock Handling To handle this correctly in a distributed system, we need to ensure that the lock is only released if it was successfully acquired. Here‚Äôs how to do it:\npublic void updateResource() { boolean lockAcquired = false; // Flag to track if the lock was acquired try { // Attempt to acquire the distributed lock acquireLock(); lockAcquired = true; // Set the flag to true if the lock is acquired // Perform the update operation doUpdate(); } catch (LockAcquisitionException e) { // Handle the case where the lock could not be acquired System.out.println(\u0026#34;Failed to acquire lock: \u0026#34; + e.getMessage()); } catch (Exception e) { // Handle any other exceptions that occurred during the update operation e.printStackTrace(); } finally { // Ensure the lock is released in the finally block if it was acquired if (lockAcquired) { unlock(); } } } private void acquireLock() throws LockAcquisitionException { // Implement your logic to acquire a distributed lock here // Throw LockAcquisitionException if the lock cannot be acquired } private void unlock() { // Implement your logic to release the distributed lock here } private void doUpdate() { // Implement your update logic here } // Custom exception for lock acquisition failure public class LockAcquisitionException extends Exception { public LockAcquisitionException(String message) { super(message); } } Explanation of the Solution Flag Initialization: A boolean flag lockAcquired is set to false initially. This flag will be set to true only if the lock is successfully acquired by the thread. Lock Acquisition: The acquireLock method attempts to acquire the lock. If it fails, it throws a LockAcquisitionException. Flag Update: If the lock is successfully acquired, lockAcquired is set to true. Update Operation: The doUpdate method performs the necessary update operations while holding the lock. Exception Handling: LockAcquisitionException: Handles the scenario where the lock acquisition fails. General Exception Handling: Catches any other exceptions that might occur during the update operation. Finally Block: The finally block checks if the lockAcquired flag is true before calling the unlock method. This ensures that the lock is only released if it was successfully acquired, preventing any attempt to release a lock that wasn‚Äôt acquired. Conclusion By managing the acquisition and release of distributed locks properly, you can ensure that your application handles concurrent updates safely and efficiently. This approach prevents race conditions and lost updates, maintaining data consistency across distributed systems. Using a boolean flag to track lock acquisition ensures that the lock is only released if it was acquired, preventing potential data corruption and ensuring robust lock management.\n","permalink":"http://localhost:1313/2024/05/managing-concurrent-updates-with.html","summary":"\u003cp\u003eManaging Concurrent Updates with Distributed Locks\u003c/p\u003e\n\u003ch1 id=\"managing-concurrent-updates-with-distributed-locks\"\u003eManaging Concurrent Updates with Distributed Locks\u003c/h1\u003e\n\u003cp\u003eIn distributed systems, managing concurrent access to shared resources is crucial to ensure data consistency and prevent corruption. Let‚Äôs explore how to handle this using a Java example, starting with a basic implementation and improving it step-by-step.\u003c/p\u003e\n\u003ch2 id=\"basic-implementation-without-proper-lock-handling\"\u003eBasic Implementation Without Proper Lock Handling\u003c/h2\u003e\n\u003cp\u003eHere\u0026rsquo;s a simple version of a method that tries to acquire a distributed lock, perform an update, and release the lock:\u003c/p\u003e","title":"Managing Concurrent Updates with Distributed Locks"},{"content":" The main problem with me w.r.t DP problem is forgetting it if i don\u0026#39;t practice. So I decided to revisit all the DP problems i solved once again just to refresh my memory. So first Lets start with a simple one. Here we go!!! Climbing stairs from Leetcode. Explanation : You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top? Example 1: Input: n = 2 Output: 2 Explanation: There are two ways to climb to the top. 1\\. 1 step + 1 step 2\\. 2 steps Example 2: Input: n = 3 Output: 3 Explanation: There are three ways to climb to the top. 1\\. 1 step + 1 step + 1 step 2\\. 1 step + 2 steps 3\\. 2 steps + 1 step So how can we solve this simple problem? As usual we can solve this problem using recursion. But the problem with recursion is it will have exponential time complexity. In recursive way the following is the solution \\`\\`\\`java public int climbStairs(int n) { if(n == 1) return 1; if(n == 2) return 2; return climbStairs(n-1) + climbStairs(n-2); } \\`\\`\\` The logic of the above is : \\* If n is 1 then there is only one way to climb the stair. \\* If n is 2 then there are two ways to climb the stair. \\* If n is greater than 2 then the number of ways to climb the stair is the sum of the number of ways to climb the stair when n-1 and n-2. So we recursively call climbStairs(n-1) and climbStairs(n-2) and\nadd them to get the result. What is the problem with this approach? The problem with this approach is it has exponential time complexity. For example if n = 5 then the number of ways to climb the stair is 8. So the number of recursive calls will be 8. If n = 6 then the number of ways to climb the stair is 13. So the number of recursive calls will be 13. if n=7 then the number of ways to climb the stair is 21. So the number of recursive calls will be 21. So the time complexity of this approach is O(2^n). Where n is the number of stairs. and 2 is the number of ways to\nclimb the stair. If we construct a recursion tree for n=5 it will look like below. !\\[\\](img\\_1.png) Space complexity of this approach is O(n) where n is the number of stairs. Or in other words the depth of the recursion tree is n. So lets get into the basic dynamic programming approach. \\`\\`\\`java class Solution { // A function that represents the answer to the problem for a given state private int dp(int i) { if (i \u0026lt;= 2) return i; // Base cases return dp(i - 1) + dp(i - 2); // Recurrence relation } public int climbStairs(int n) { return dp(n); }} \\`\\`\\` The above approach is a top-down approach. Means we are solving the problem from the top to the bottom. The time complexity of the above approach is\nO(2^n) and the space complexity is O(n). **_So this is not really dynamic programming._** This is just a recursive approach. So lets get into the bottom-up approach. ```java\nclass Solution {\npublic int climbStairs(int n) { if (n \u0026lt;= 2) return n; // Base cases int[] dp = new int[n + 1]; // Create an array to store\n// the subproblems dp\\[1\\] = 1; // Base case dp\\[2\\] = 2; // Base case for (int i = 3; i \u0026lt;= n; i++) { dp\\[i\\] = dp\\[i - 1\\] + dp\\[i - 2\\]; // The recurrence relation } return dp\\[n\\]; // The answer to the problem for n steps }} \\`\\`\\` The above approach is a bottom-up approach. Means we are solving the problem from the bottom to the top. Also the above approach is a tabulation approach.\nMeans we are solving the problem using an array to store the subproblems. The time complexity of the above approach is O(n) and the space\ncomplexity is O(n). The flow goes like this : * dp[1] = 1 // Base case Means if there is only one stair then\nthere is only one way to climb the stair.\n* dp[2] = 2 // Base case Means if there are two stairs then\nthere are two ways to climb the stair.\nfrom 3 to n we calculate the number of ways to climb the stair\nusing the following formula.\n\\* dp\\[i\\] \\= dp\\[i - 1\\] \\+ dp\\[i - 2\\] // The recurrence relation \\* dp\\[n\\] // The answer to the problem for n steps So if you look at the first example of recursive approach the number of recursive calls for n=5 is 8. But if you look at the bottom-up\napproach the number of steps to calculate the number of ways to climb the stair for n=5 is 5. So the time complexity of the bottom-up approach is O(n)\nand the space complexity is O(n). So lets get into another problem. This is a Medium one.\nAnd this is a classic one.\nThe problem is House Robber from Leetcode.\nYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that\nadjacent houses have security systems connected and it will\nautomatically contact the police if two adjacent houses were broken into on\nthe same night.\nBase case : If there is 4 houses then the maximum amount of money you can rob is the maximum of the amount of money in the first house and the amount of money in the second house. plus the maximum amount of money you can rob from the remaining houses. The intuition behind the problem is the following.\nmaxRobbedAmount[0]=nums[0]\nmaxRobbedAmount[1]=max(maxRobbedAmount[0],nums[1])\nmaxRobbedAmount[2]=max(maxRobbedAmount[0]+nums[2],maxRobbedAmount[1])\nmaxRobbedAmount[3]=max(maxRobbedAmount[1]+nums[3],maxRobbedAmount[2])\nmaxRobbedAmount[4]=max(maxRobbedAmount[2]+nums[4],maxRobbedAmount[3])\nEquation : maxRobbedAmount[i]=max(maxRobbedAmount[i-2]+nums[i],\nmaxRobbedAmount\\[i-1\\]) So the solution is the following. \\`\\`\\`java class Solution { public int rob(int\\[\\] nums) { if (nums.length == 0) return 0; if (nums.length == 1) return nums\\[0\\]; if (nums.length == 2) return Math.max(nums\\[0\\], nums\\[1\\]); int\\[\\] maxRobbedAmount = new int\\[nums.length\\]; maxRobbedAmount\\[0\\] = nums\\[0\\]; maxRobbedAmount\\[1\\] = Math.max(nums\\[0\\], nums\\[1\\]); for (int i = 2; i \u0026lt; nums.length; i++) { maxRobbedAmount\\[i\\] = Math.max(maxRobbedAmount\\[i - 2\\] + nums\\[i\\], maxRobbedAmount\\[i - 1\\]); } return maxRobbedAmount\\[nums.length - 1\\]; }} ```\nThe above approach is a bottom-up approach. Means we are solving the\nproblem from the bottom to the top. Also the above approach is a\ntabulation approach. Means we are solving the problem using an array to\nstore the subproblems.So the time complexity of the above approach is O(n)\nand the space complexity is O(n). Because we are using an array to store\nthe subproblems.\n``` ","permalink":"http://localhost:1313/2024/03/httpswww.justinmathew.com202403dynamic-programming-revisiting.html.html","summary":"\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\n\nThe main problem with me w.r.t DP problem is forgetting it if i don\u0026#39;t \n\npractice. So I decided to revisit all the DP problems i solved once again \n\njust to refresh my memory.\n\n  \nSo first Lets start with a simple one. Here we go!!!  \n  \nClimbing stairs from Leetcode.  \n  \n\nExplanation : You are climbing a staircase. \n\nIt takes n steps to reach the top.  \nEach time you can either climb 1 or 2 steps. In how many \n\ndistinct ways can you climb to the top?\n\nExample 1:  \n  \nInput: n = 2  \nOutput: 2  \nExplanation: There are two ways to climb to the top.  \n1\\. 1 step + 1 step  \n2\\. 2 steps  \n  \nExample 2:  \nInput: n = 3  \nOutput: 3  \nExplanation: There are three ways to climb to the top.  \n  \n1\\. 1 step + 1 step + 1 step  \n2\\. 1 step + 2 steps  \n3\\. 2 steps + 1 step  \n  \nSo how can we solve this simple problem?  \n  \nAs usual we can solve this problem using recursion.   \nBut the problem with recursion is it will have exponential time complexity.   \nIn recursive way the following is the solution     \\`\\`\\`java  \n public int climbStairs(int n) { if(n == 1) return 1; if(n == 2) return 2; return climbStairs(n-1) + climbStairs(n-2); } \\`\\`\\`  \nThe logic of the above is : \n\n \\* If n is 1 then there is only one way to climb the stair. \\* If n is 2 then there are two ways to climb the stair. \\* If n is greater than 2 then the number of ways to climb the stair is ¬†the sum of the number of ways to climb the stair when n-1 and n-2.\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSo we recursively call climbStairs(n-1) and climbStairs(n-2) and\u003c/p\u003e","title":"Revisiting Dynamic Programming"},{"content":"Design patterns are general reusable solutions to common problems that occur in software design. They are not code, but rather guidelines on how to solve a particular problem in a particular context. They are not a finished design that can be transformed directly into code. They are a description or template for how to solve a problem that can be used in many different situations. Types of design patterns in Java -------------------------------- There are three types of design patterns in Java: * Creational\n* Structural\n* Behavioral\n### Creational design patterns Creational design patterns are related to the way of creating objects. These patterns provide various object creation mechanisms, which increase flexibility and reuse of existing code. These patterns provide various object creation mechanisms, which increase flexibility and reuse of existing code. There are five types of creational design patterns: \\* Singleton Method \\* Factory Method \\* Abstract Factory Method \\* Builder Method \\* Prototype Method ### Singleton Method Consider a scenario where you need to manage a configuration file. You need to read the configuration file only once and then keep it in memory. For this, you need to create a class that will read the configuration file and keep it in memory. The below is a PUML diagram for a simple Configuration manager class. Example: Java Runtime, Logger, Spring Beans, and many more.\nDifferent flavours from JDK.\nRuntime.getRuntime();\nDesktop.getDesktop();\n","permalink":"http://localhost:1313/2024/03/java-design-patterns-jdp.html","summary":"\u003ch2 id=\"design-patterns-are-general-reusable-solutions-to-common-problems-that-occur-in-software-design-they-are-not-code-but-rather-guidelines-on-how-to-solve-a-particular-problem-in-a-particular-context-they-are-not-a-finished-design-that-can-be-transformed-directly-into-code-they-are-a-description-or-template-for-how-to-solve-a-problem-that-can-be-used-in-many-different-situations\"\u003eDesign patterns are general reusable solutions to common problems that occur in software design. They are not code, but rather guidelines on how to solve a particular problem in a particular context. They are not a finished design that can be transformed directly into code. They are a description or template for how to solve a problem that can be used in many different situations.\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e  \n  \n\nTypes of design patterns in Java\n--------------------------------\n\n  \nThere are three types of design patterns in Java:  \n  \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e* Creational\u003cbr\u003e\n* Structural\u003cbr\u003e\n* Behavioral\u003c/p\u003e","title":"Java Design Patterns - JDP Series #1"},{"content":"Today was not an ordinary day for me; it began with the need to take an unexpected sick day. The morning unfolded with urgency as I planned to drop off my child, but fate had a different story in store. Around 9:30 AM, near Hopefarm in Whitefield, my day took a dramatic turn. As I attempted to overtake a car on the right, an elderly man crossing the road appeared in my path. Despite his slow pace and my high speed, I managed to brake just in time, reducing the impact of the collision. The man, although not severely injured, fell and sustained minor scratches on his knees.\nThe incident drew immediate attention, and several passersby stopped to assist. My initial fear of confrontation was alleviated by my attempts to communicate in broken Kannada, which, to my relief, helped manage the situation. With my hands trembling, I turned to my wife and daughter, who were with me in the car, for a water bottle to tend to the injured man. After cleaning his face, we hurried him to Manipal Hospital for medical attention.\nRemarkably, the man expressed his gratitude throughout the ordeal. Upon arrival at the hospital, initial examinations showed his heart rate was normal, but what shocked me was learning about his age, 75, and that he had two pacemakers. His resilience was notable, yet the concern for potential injuries due to his age was palpable. Fortunately, after further assessments and an X-ray, we were relieved to hear that there were no fractures, only a knee injury.\nThroughout this time, the man remained conscious and trusting. His ability to call his son-in-law and wife brought a sense of comfort to him, and I did my best to provide reassurance. As we awaited the X-ray results, my brother joined me, offering his support. The news that there were no fractures brought a collective sigh of relief.\nThe atmosphere grew tense with the arrival of his wife and son-in-law, bracing themselves for the worst, fearing the accident had left him in a dire state. However, their anxiety was soon alleviated when they realized that, thanks to the prompt and compassionate actions taken, he was in stable condition. The moment served as a poignant reminder of the fragile nature of life and the importance of kindness in times of crisis.\nAs conversations unfolded, the wife began to share more about their family\u0026rsquo;s journey, particularly focusing on their son\u0026rsquo;s challenges. Their son, once a manager at IBM, had taken a bold leap by moving to Singapore for work before returning to Bangalore. His career transition from the corporate world to starting his own real estate business marked a period of prosperity for the family. However, life\u0026rsquo;s unpredictable nature struck hard when he suffered a stroke, an event that turned their lives upside down.\nAt just 45 years old, their son faced a daunting battle for recovery. The medical expenses were astronomical, draining nearly 45 to 50 lakhs from their savings, with hospital bills averaging around 90,000 per day over two months. Despite the financial strain, the progress he made was heartening; from being bedridden to sitting up, each small victory was celebrated. Yet, the emotional and financial toll of the situation was evident as his mother recounted their story, her eyes brimming with tears.\nThe narrative of their son\u0026rsquo;s struggle and resilience added a layer of depth to the day\u0026rsquo;s events, transforming a simple act of assistance into a profound connection between two families. The gratitude expressed by the elderly man\u0026rsquo;s wife, punctuated by her blessing, \u0026ldquo;God Bless you and your family,\u0026rdquo; resonated deeply, leaving an indelible mark on the heart.\nIn the end, as I ensured their safe return home and bid them farewell, the promise to keep their loved one safe from harm was not just a commitment to them but a reminder of the interconnectedness of our lives. The story of their son, a testament to human resilience in the face of adversity, underscored the day\u0026rsquo;s experiences, enriching the fabric of this unexpected encounter with strands of hope, perseverance, and shared humanity.\n","permalink":"http://localhost:1313/2024/02/fed-27-2024-day-of-compassion-and.html","summary":"\u003cp\u003eToday was not an ordinary day for me; it began with the need to take an unexpected sick day. The morning unfolded with urgency as I planned to drop off my child, but fate had a different story in store. Around 9:30 AM, near Hopefarm in Whitefield, my day took a dramatic turn. As I attempted to overtake a car on the right, an elderly man crossing the road appeared in my path. Despite his slow pace and my high speed, I managed to brake just in time, reducing the impact of the collision. The man, although not severely injured, fell and sustained minor scratches on his knees.\u003c/p\u003e","title":"Fed 27 2024. A Day of Compassion and Unexpected Encounters"},{"content":"Jump Game Peak and Valley approach. Jump game is a medium level leetcode problem which is very interesting yet brainy. Once you understand the problem correctly then the answer is obvious. The probelm goes like this according to leetcode.¬†You are given an integer array¬†nums. You are initially positioned at the array\u0026rsquo;sfirst index, and each element in the array represents your maximum jump length at that position.\nReturn¬†true_¬†if you can reach the last index, or¬†false¬†otherwise_.\nFor example consider this array\n[1,3,2,2,0,1]\nWhen I am at position 1 then i can jump to position 2, Once i am at postition 2 I can jump to 3,4 or 5. The max i can jump from Second position is to position 5 and the element at position 5 is 0 this essentialy means i cannot jump further.¬†The way to solve this problem using peak and valley here I am representing this array as peaks and valleys.\nIf you look¬†at the above image you can see peak and valleys. Once you are on the valley that is 0 You don\u0026rsquo;t really have a way out of it. But you can actually make a jump from position 3 to position 5 by skipping the valley. This is the basic intuition behind the solution.¬†The basic steps are the following :\nYou create a variable called reachable which holds the maximum position you can reach.¬†So how do you calculate the value of reachable it is :\nMax(reachable, currentPosition+input[currentPosition]).\nSo the max reachable index will be the maximum of reachable or currentPosition+input[currentPosition].¬†So our job is just to calculate this every position and if at any given point we realize that the currentPosition is greater than the reachable then we reuturn false, essentially means we are at the valley and no way to escape.\nprivate boolean canJumpFromPosition(int i, int\\[\\] nums) { int reachable=0; int n=nums.length; for(int j=0;j\u0026lt;n;j++){ if(j\u0026gt;reachable){ return false; }else{ reachable=Math.max(reachable,j+nums\\[j\\]); } } return true; } In this we iterate over the arrray and each position we check are we at a reachable position or not. If we are not at a reachable position then we are at valley and if we are at a reachable position then we just recalculate the reachable index by adding currentIndex and the value in the current index.\n","permalink":"http://localhost:1313/2024/02/jump-game.html","summary":"\u003ch2 id=\"jump-game-peak-and-valley-approach\"\u003eJump Game Peak and Valley approach.\u003c/h2\u003e\n\u003cp\u003eJump game is a medium level leetcode problem which is very interesting yet brainy. Once you understand the problem correctly then the answer is obvious. The probelm goes like this according to leetcode.¬†\u003c/p\u003e\n\u003cp\u003eYou are given an integer array¬†\u003ccode\u003enums\u003c/code\u003e. You are initially positioned at the array\u0026rsquo;sfirst index, and each element in the array represents your maximum jump length at that position.\u003c/p\u003e\n\u003cp\u003eReturn¬†\u003ccode\u003etrue\u003c/code\u003e_¬†if you can reach the last index, or¬†\u003cem\u003e\u003ccode\u003efalse\u003c/code\u003e\u003c/em\u003e¬†otherwise_.\u003c/p\u003e","title":"Jump Game"},{"content":"Skewed workloads and Relieving Hot Spots Imagine you have a library with books categorized by their first letter (A-Z). This is like partitioning data based on a key (like the first letter of a book title).\nProblem: One letter (say, \u0026ldquo;X\u0026rdquo;) becomes super popular (a celebrity author!). Everyone wants to read \u0026ldquo;X\u0026rdquo; books, causing a \u0026ldquo;hot spot\u0026rdquo; (overcrowding) in the \u0026ldquo;X\u0026rdquo; section.\nHashing doesn\u0026rsquo;t fix it: Even if you assign different \u0026ldquo;buckets\u0026rdquo; based on a hash of the title, all \u0026ldquo;X\u0026rdquo; books still end up in the \u0026ldquo;X\u0026rdquo; bucket.\nSolution 1: Split the key: Add a random number to each \u0026ldquo;X\u0026rdquo; book title (e.g., \u0026ldquo;X123\u0026rdquo;, \u0026ldquo;X456\u0026rdquo;). This spreads them across different buckets, reducing the crowd in \u0026ldquo;X\u0026rdquo;.\nDrawback: Now you need to check all buckets with \u0026ldquo;X\u0026rdquo; to find all the books (more work for reading).\nSolution 2 (future): Imagine the library magically adjusts shelves based on popularity, automatically spreading out the \u0026ldquo;X\u0026rdquo; books.\nTakeaway: Choose the solution that best fits your needs. Splitting keys helps with hot spots but adds complexity. Future systems might handle this automatically.\nPartitioning and Secondary Indexes A secondary index usually doesn\u0026rsquo;t identify a record uniquely but rather is a way of searching for occurences of a particular value; find all action by user 123, find all articles containing the word hogwash, find all cars whose color is red. In these statements you can see we use a secondary index for our query.¬†This is essential for any database design. The issue with secondary indexes are they don\u0026rsquo;t map neatly to partitions. This happens due to non uniqueness, for example find all action by user means find all actions| filter by user, so the find all will go search on all partition. This is a simple example for this problem.\nThere are two main approaches to partitioning a database with secondary indexes : document-based partitioning and term based partitioning.¬†Partitioning Secondary Indexes by Document. If you look at this image you can see within each partition there is another secondary index created.¬†So if you want to search for red cars, you need to send the query to all partitions, and combine all the results you get back.¬†In this approach you can notice each partition creates its own secondary index and when you are writing to it you only need to deal with the partition that contains the document ID that you are writing. For this exact reason a Document-Partitioned index is also known as local index.\nQuerying this kind of partitioned database is known as scatter/gather, and it can make read queries on secondary indexe quite expensive. Even if you query the partition in parallel _scatter/gather¬†_¬†is prone to tail latency amplifications. Nevertheless it is a widely used approach.¬†On the next blog we will learn more about partitioining from Martin Klepmann\u0026rsquo;s \u0026ldquo;Designing Data intensive Applications\n","permalink":"http://localhost:1313/2024/02/from-painful-tables-to-performance_15.html","summary":"\u003ch2 id=\"skewed-workloads-and-relieving-hot-spots\"\u003eSkewed workloads and Relieving Hot Spots\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgoJClAUTSTj0roZIBCR4_qM3sXJihaJLvPpviq5z25FrwP_N-Tv_SipKyDUAISzWKIb2gRY52GxbIx6uQ71HQaTjjW9UEhJuNiYc1X3fBfcCWRvjE7zTz-3l6YXKBxLFNDtTCb4GXpk2BxGLPc9IJAm_dRsWJpE4JWF2UiTR1WJF9TQFwW7wng8IikazsH/s1024/DALL%C2%B7E%202024-02-16%2010.03.06%20-%20Create%20an%20abstract,%20visually%20engaging%20image%20that%20symbolizes%20the%20concept%20of%20database%20partitioning.%20Use%20geometric%20shapes,%20lines,%20and%20vibrant%20colors%20to%20d.webp\"\u003e\u003cimg loading=\"lazy\" src=\"https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgoJClAUTSTj0roZIBCR4_qM3sXJihaJLvPpviq5z25FrwP_N-Tv_SipKyDUAISzWKIb2gRY52GxbIx6uQ71HQaTjjW9UEhJuNiYc1X3fBfcCWRvjE7zTz-3l6YXKBxLFNDtTCb4GXpk2BxGLPc9IJAm_dRsWJpE4JWF2UiTR1WJF9TQFwW7wng8IikazsH/s320/DALL%C2%B7E%202024-02-16%2010.03.06%20-%20Create%20an%20abstract,%20visually%20engaging%20image%20that%20symbolizes%20the%20concept%20of%20database%20partitioning.%20Use%20geometric%20shapes,%20lines,%20and%20vibrant%20colors%20to%20d.webp\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eImagine you have a library with books categorized by their first letter (A-Z). This is like partitioning data based on a key (like the first letter of a book title).\u003c/p\u003e\n\u003cp\u003eProblem: One letter (say, \u0026ldquo;X\u0026rdquo;) becomes super popular (a celebrity author!). Everyone wants to read \u0026ldquo;X\u0026rdquo; books, causing a \u0026ldquo;hot spot\u0026rdquo; (overcrowding) in the \u0026ldquo;X\u0026rdquo; section.\u003c/p\u003e\n\u003cp\u003eHashing doesn\u0026rsquo;t fix it: Even if you assign different \u0026ldquo;buckets\u0026rdquo; based on a hash of the title, all \u0026ldquo;X\u0026rdquo; books still end up in the \u0026ldquo;X\u0026rdquo; bucket.\u003c/p\u003e","title":"From Painful Tables to Performance Bliss: My Journey with Database Partitioning - Part II"},{"content":"Ah, the early days of wrangling massive data tables! I vividly remember the struggle ‚Äì slow queries, performance bottlenecks, and the ever-growing cloud bill. It was an uphill battle until we unearthed the magic bullet: database partitioning. Talk about a revelation! This newfound approach not only eradicated performance issues but also slashed computational costs.\nBut the story doesn\u0026rsquo;t end there. My exploration revealed a treasure trove of partitioning techniques, each unlocking unique advantages. Inspired by \u0026ldquo;Designing Data-Intensive Applications\u0026rdquo;, I embarked on a quest to master this data management superpower. This blog chronicles my learnings, shedding light on the various ways you can partition your data for optimal performance and cost-efficiency.\nEvery partition is a small database of its own. Each piece of data will belong to one partition. The main reason for having this small databases or we call partition is for scalability. Different partition can be placed in different nodes in a shared-nothing cluster(A cluster of nodes where nodes will be independent).\nAssume there is a query to fetch a row, the query will be performed by a node on its on partition. So to increase throughput just add more nodes.\nPartitioning and Replication Building on the previous statement, if every node has a partition, it implies that each node holds copies of all partitions. This ensures that even though each record belongs to a specific partition, it might still be present on multiple nodes for the sake of fault tolerance. Partitioning by Key Range Real-World Example: Imagine millions of IoT devices, each with a unique IMEI number and timestamps for sensor readings. We can leverage key-range partitioning by using the date as the key. However, a potential drawback arises: all data within a single day would reside in the same partition, leaving others idle. Dual Partitioning: To address this and distribute the write load more evenly, we can introduce dual partitioning. We\u0026rsquo;ll use both the date and the IMEI number as keys. This ensures data gets distributed across multiple partitions based on both date and device, preventing overloading of single partitions.\nQuerying: When fetching data from multiple sensors within a specific time range, separate range queries will be needed for each IMEI number. However, the overall performance gain often outweighs this drawback due to the efficient retrieval within each partition.\nPersonal Experience: This concept played a pivotal role in my career, saving the company millions. By implementing dual partitioning for range-based queries on massive IoT sensor data, we significantly improved performance and optimized resource utilization. This experience solidified the importance of understanding core concepts before designing any system.\nPartitioning by Hash of Key This is another very interesting partitioning concept. In contrast to key-range partitioning, we use a hash function to determine the partition of a given key. A good hash function takes skewed data and makes it uniformly distributed. Imagine you have a 32-bit hash function that takes a string. When you provide a new string, it returns a seemingly random number between 0 and (2 to the power of 32) - 1. Even if the input strings are very similar, their hashes are evenly distributed across that range of numbers.\nCassandra and Mongo uses MD5\nVoldermort uses the Fowoler-Noll-Vo function.\nBuilt-in hash functions of programming languages may not be suitable for data partitioning. For example, Java\u0026rsquo;s hashCode() method can generate different hash values for the same key in different processes. In such cases, it\u0026rsquo;s recommended to use separate hash implementations specifically designed for consistent key distribution across partitions. The figure below shows how partitioning by a well-chosen hash function actually works.\nThis is indeed a great technique for evenly distributing keys across partitions. The partition boundaries can be equally spaced or chosen pseudorandomly.\n","permalink":"http://localhost:1313/2024/02/from-painful-tables-to-performance.html","summary":"\u003cp\u003eAh, the early days of wrangling massive data tables! I vividly remember the struggle ‚Äì slow queries, performance bottlenecks, and the ever-growing cloud bill. It was an uphill battle until we unearthed the magic bullet:  database partitioning. Talk about a revelation! This newfound approach not only eradicated performance issues but also slashed computational costs.\u003c/p\u003e\n\u003cp\u003eBut the story doesn\u0026rsquo;t end there. My exploration revealed a treasure trove of partitioning techniques, each unlocking unique advantages. Inspired by \u0026ldquo;Designing Data-Intensive Applications\u0026rdquo;, I embarked on a quest to master this data management superpower. This blog chronicles my learnings, shedding light on the various ways you can partition your data for optimal performance and cost-efficiency.\u003c/p\u003e","title":"From Painful Tables to Performance Bliss: My Journey with Database Partitioning - Part I"},{"content":"¬†Introduction A colleague recommended Martin Kleppmann\u0026rsquo;s \u0026ldquo;Designing Data-Intensive Applications\u0026rdquo; to me. Initially, I found the beginning somewhat tedious and opted for a non-linear approach, selecting topics of interest at random rather than reading from start to finish as one might with a novel. This strategy seemed fitting given the book\u0026rsquo;s comprehensive coverage of software system design, akin to an engineering bible. Today, I\u0026rsquo;ve chosen to delve into the concept of Event Sourcing. Let\u0026rsquo;s explore this topic together.\nWhy Event Sourcing?\nRelevance: It\u0026rsquo;s a critical concept in building scalable, resilient distributed systems and is widely applicable in modern software architectures, including microservices. Foundational Knowledge: Understanding event sourcing will deepen your knowledge of how large-scale systems manage state and handle data changes over time. Practical Application: It\u0026rsquo;s highly relevant to real-world systems, particularly in scenarios requiring audit trails, historical data analysis, or complex business transactions. Lets see an Order table schema below which is written on the traditional approach.\nTraditional Approach schema\nHere :\norder_id is a unique identifier for each order. customer_id links to a customers table (not shown) that contains customer details. order_date is the date and time the order was placed. total_amount is the total cost of the order. status could be values like \u0026lsquo;Placed\u0026rsquo;, \u0026lsquo;Paid\u0026rsquo;, \u0026lsquo;Shipped\u0026rsquo;, \u0026lsquo;Delivered\u0026rsquo;, etc. Simple right..?\nObviously you have seen this kind of schema in your career. 100% , All of us seen this.\nEvent Sourcing Approach Schema\nAnd a simplified orders table to store order IDs\nYou are starting to get what is event sourcing is now. But still doubtfull right, well everyone is will be doubtful until you see some real data. So lets insert some dummy data into the traditional table and to the event sourcing table.¬†This will create four orders with different statuses in the orders table.\nNow the event sourcing data.\nIn this example¬†Order 1 goes through the full lifecycle from being placed to delivery. Order 2 is placed and paid for but hasn\u0026rsquo;t been shipped yet. Order 3 is placed, paid for, and shipped, but not yet delivered. Order 4 is only placed. Event sourcing is much more descriptive when it comes to the historical events that have happened to an order. Imagine a bug occurred during the order placing flow; we can always replay this particular event and debug the system, instead of permanently losing that flow and saying \u0026ldquo;not reproducible,\u0026rdquo; then waiting for the next order placement to occur. You know, the infamous \u0026ldquo;not reproducible\u0026rdquo; bug.\nThe ideal places to apply this?\nConsidering the earlier discussion about the \u0026ldquo;not reproducible\u0026rdquo; bug, let\u0026rsquo;s contemplate its implications in more critical scenarios. Would a bank ever be content with labeling a transactional glitch as \u0026ldquo;not reproducible\u0026rdquo; and leaving it at that?¬†Or imagine placing an order on Amazon, only to encounter an error during packaging that erroneously signals a payment problem. Would such explanations be satisfactory?\nEvent sourcing is well-suited for systems that undergo a series of discrete events, each affecting the system\u0026rsquo;s state.\nThis is just an introducton :¬†Please watch/read the following videos to understand more\nhttps://www.youtube.com/watch?v=MA_3fPBFBtg. About linkedins uses of kafka\nEvent sourcing from¬†martin kleppmann designing data-intensive applications\nSo that\u0026rsquo;s 10 Minutes in the morning!\n","permalink":"http://localhost:1313/2024/02/event-sourcing-moving-out-of-traditions.html","summary":"\u003ch2 id=\"introduction\"\u003e¬†Introduction\u003c/h2\u003e\n\u003cp\u003eA colleague recommended Martin Kleppmann\u0026rsquo;s \u0026ldquo;Designing Data-Intensive Applications\u0026rdquo; to me. Initially, I found the beginning somewhat tedious and opted for a non-linear approach, selecting topics of interest at random rather than reading from start to finish as one might with a novel. This strategy seemed fitting given the book\u0026rsquo;s comprehensive coverage of software system design, akin to an engineering bible. Today, I\u0026rsquo;ve chosen to delve into the concept of Event Sourcing. Let\u0026rsquo;s explore this topic together.\u003c/p\u003e","title":"Event Sourcing - Moving out of traditions | Simplified version"},{"content":"Objective The goal is to create a class capable of handling browser history operations efficiently. This includes:\nInitializing the browser with a specified homepage. Navigating to new URLs (visiting pages). Enabling backward and forward navigation through the history. Key Components Constructor: Initializes the browser with a homepage. Visit(URL): Navigates to a new URL and updates the current position in the history. Back(steps): Moves back a specified number of steps in history and returns the current URL. Forward(steps): Moves forward a specified number of steps in history and returns the current URL. Implementation We will use a doubly linked list to manage the history of visited URLs, allowing for efficient navigation both backward and forward.\n`class BrowserHistory { class Node { String url; Node prev, next; public Node(String url) { this.url = url; } } private Node current; public BrowserHistory(String homepage) { current = new Node(homepage); } public void visit(String url) { Node newNode = new Node(url); current.next = newNode; newNode.prev = current; current = newNode; // Move forward to the new page } public String back(int steps) { while (current.prev != null \u0026amp;\u0026amp; steps-- \u0026gt; 0) { current = current.prev; } return current.url; } public String forward(int steps) { while (current.next != null \u0026amp;\u0026amp; steps-- \u0026gt; 0) { current = current.next; } return current.url; } }` Example Usage `BrowserHistory browserHistory = new BrowserHistory(\u0026#34;takeuforward.org\u0026#34;); browserHistory.visit(\u0026#34;google.com\u0026#34;); // User visits \u0026#39;google.com\u0026#39;. browserHistory.visit(\u0026#34;instagram.com\u0026#34;); // User then visits \u0026#39;instagram.com\u0026#39;. browserHistory.back(1); // User goes back one step to \u0026#39;google.com\u0026#39;. browserHistory.back(1); // User goes back another step to \u0026#39;takeuforward.org\u0026#39;. browserHistory.forward(1); // User moves forward to \u0026#39;google.com\u0026#39; again. browserHistory.visit(\u0026#34;takeuforward.org\u0026#34;); // User visits \u0026#39;takeuforward.org\u0026#39;, overwriting forward history. browserHistory.forward(2); // No forward history, remains on \u0026#39;takeuforward.org\u0026#39;. browserHistory.back(2); // User goes back to \u0026#39;google.com\u0026#39;. browserHistory.back(7); // Attempts to go back 7 steps but only goes back to the homepage.` Complexity Analysis Constructor: O(1) - Only involves initializing a single node. Visit(URL): O(1) - Adding a new node to a doubly linked list is a constant time operation. Back(steps) and Forward(steps): O(steps) - Proportional to the number of steps taken, due to traversal through the linked list. This design mirrors the functionality of real web browsers, offering an intuitive navigation experience while ensuring operations are performed efficiently.\n","permalink":"http://localhost:1313/2024/02/designing-browser-history-feature.html","summary":"\u003ch3 id=\"objective\"\u003eObjective\u003c/h3\u003e\n\u003cp\u003eThe goal is to create a class capable of handling browser history operations efficiently. This includes:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eInitializing the browser with a specified homepage.\u003c/li\u003e\n\u003cli\u003eNavigating to new URLs (visiting pages).\u003c/li\u003e\n\u003cli\u003eEnabling backward and forward navigation through the history.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"key-components\"\u003eKey Components\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eConstructor\u003c/strong\u003e: Initializes the browser with a homepage.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eVisit(URL)\u003c/strong\u003e: Navigates to a new URL and updates the current position in the history.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBack(steps)\u003c/strong\u003e: Moves back a specified number of steps in history and returns the current URL.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eForward(steps)\u003c/strong\u003e: Moves forward a specified number of steps in history and returns the current URL.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"implementation\"\u003eImplementation\u003c/h3\u003e\n\u003cp\u003eWe will use a doubly linked list to manage the history of visited URLs, allowing for efficient navigation both backward and forward.\u003c/p\u003e","title":"Designing a Browser History Feature"},{"content":"On the early morning of February 1st, I decided to tackle a problem from the Striver\u0026rsquo;s SDE sheet.\nI came across an intriguing challenge titled \u0026ldquo;Set Matrix Zeroes\u0026rdquo;.\nHere\u0026rsquo;s how I approached it:\nInitially, I attempted a brute force method. The usual strategy of iterating through a matrix and setting rows and columns to zero has a drawback: it can lead to the loss of the matrix\u0026rsquo;s original state, potentially zeroing out the entire matrix, which isn\u0026rsquo;t the desired outcome. To avoid this, my approach involved marking the rows and columns that intersect at a zero element with a temporary value of -1. This way, the matrix\u0026rsquo;s original elements remain unchanged until the final step, where a second pass converts all -1 values back to zeros.\nThe main drawback of this method is its inefficiency, with a time complexity that could be roughly estimated as (O((m times n)^2)), due to the need for multiple iterations over the matrix.\nSeeking improvement, I explored an optimal solution that builds upon the brute force idea but introduces two marker arrays, one for rows and another for columns. As we scan the original matrix, we use these arrays to mark any row or column containing a zero. A subsequent iteration through the matrix then uses these markers to set the corresponding elements to zero. This refined approach reduces the number of iterations, achieving a time complexity of (O(2 times m times n)).\nDespite the improvement, I wondered if there was an even better solution. Recalling that I had previously solved this problem on LeetCode under the title \u0026ldquo;Set Matrix Zeroes\u0026rdquo; (you can find the problem [here](https://leetcode.com/problems/set-matrix-zeroes/)), I revisited my submission. To my surprise, I had employed a different, more efficient strategy in my past solution, which can be viewed [here](https://leetcode.com/problems/set-matrix-zeroes/submissions/1004912402/).\nThe best solution I found leverages the first row and first column of the matrix as marker arrays, eliminating the need for additional space. A special variable is used to determine whether the first row or column should be entirely zeroed. This approach requires careful iteration from the second row and column onwards, with a final pass to address the first row and column as needed.\nFor those interested in the solutions, they are available on my GitHub repository at [this link](https://github.com/mathewjustin/2024-DsAndAlgo/tree/main/src/main/java/com/codepower/striver/arrays).\nThank you for taking the time to read this if you\u0026rsquo;ve made it this far.\nJustin\n","permalink":"http://localhost:1313/2024/01/an-early-morning-adventure.html","summary":"\u003cp\u003eOn the early morning of February 1st, I decided to tackle a problem from the Striver\u0026rsquo;s SDE sheet.\u003c/p\u003e\n\u003cp\u003eI came across an intriguing challenge titled \u0026ldquo;Set Matrix Zeroes\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eHere\u0026rsquo;s how I approached it:\u003c/p\u003e\n\u003cp\u003eInitially, I attempted a brute force method. The usual strategy of iterating through a matrix and setting rows and columns to zero has a drawback: it can lead to the loss of the matrix\u0026rsquo;s original state, potentially zeroing out the entire matrix, which isn\u0026rsquo;t the desired outcome. To avoid this, my approach involved marking the rows and columns that intersect at a zero element with a temporary value of -1. This way, the matrix\u0026rsquo;s original elements remain unchanged until the final step, where a second pass converts all -1 values back to zeros.\u003c/p\u003e","title":"An early morning adventure"},{"content":"KEEP ONE HAND DISTANCE!\n","permalink":"http://localhost:1313/2022/04/an-engineers-view-to-religion.html","summary":"\u003cp\u003eKEEP ONE HAND DISTANCE!\u003c/p\u003e","title":"An engineers view to religion"},{"content":"Cycle travelled all the way from Bangalore to Kannan devan hills, Idukki. ;)¬†A wonderful journey of last 3 years has come to an end. Moved out of MBRDI / DTICI ( Daimler Trucks Innovation Center India)\n","permalink":"http://localhost:1313/2021/12/moving-from-wonderful-organiztion.html","summary":"\u003cp\u003eCycle travelled all the way from Bangalore to Kannan devan hills, Idukki. ;)¬†\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://blogger.googleusercontent.com/img/a/AVvXsEhf3De-WXVocLoeSz6TAH3rhUUqwui_q2DBZMiUYpKx6f__tWEfmn1ctsLAO_q6KSmGrE_u8QNvDwAlDTdTVn8ayBInEF-V01eVkMnLmtlVcc1xonfZJ4JncASVF9TzY4ESGAgeSZF1b6JT1RrcuuLM3XcM04IsebMAas5NMjDdFnnWpfa-1krWSiWKPg=s1024\"\u003e\u003cimg loading=\"lazy\" src=\"https://blogger.googleusercontent.com/img/a/AVvXsEhf3De-WXVocLoeSz6TAH3rhUUqwui_q2DBZMiUYpKx6f__tWEfmn1ctsLAO_q6KSmGrE_u8QNvDwAlDTdTVn8ayBInEF-V01eVkMnLmtlVcc1xonfZJ4JncASVF9TzY4ESGAgeSZF1b6JT1RrcuuLM3XcM04IsebMAas5NMjDdFnnWpfa-1krWSiWKPg=w379-h379\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eA wonderful journey of last 3 years has come to an end. Moved out of MBRDI / DTICI ( Daimler Trucks Innovation Center India)\u003c/p\u003e","title":"Moving from a wonderful organiztion !"},{"content":"¬†I like to fork interesting github repositories and experiment with it. Those who do this actively might have faced the problem of upstream sync, where we need to sync our repository with the upstream repository. Imagine you forked a repository contains some articles which are being updated everyday, you will like them to have it synced everyday. I do ;)¬†Github introduced a feature called fetch upstream this year to solve this issue. But in this case you need to click on the fetch upstream button by yourself, this article is for the lazy ones who want it to be done automatically.¬†In this blog we are about to learn how to automate upstream fetch of any repository you cloned. We are using Github actions to do this. The below is the yaml configuration for my github action\nHere you can see the cron is set to run at midnight, also as you might have already noticed i have created a simple bat file to be excecuted, you can see it below. Next step is to configure a github action with the yml file we created. Go to Actions tab\nClick on New Workflow-\u0026gt; Skip this and set up workflow yourself.\nHere you can select the yml file you created under your repository. Once you set it it up your fork will automatically sync every night.¬†You can see this example live on my github repository :¬†every-programmer-should-know\n","permalink":"http://localhost:1313/2021/08/automate-upstream-update-using-github.html","summary":"\u003cp\u003e¬† ¬† ¬† I like to fork interesting github repositories and experiment with it. Those who do this actively might have faced the problem of upstream sync, where we need to sync our repository with the upstream repository. Imagine you forked a repository contains some articles which are being updated everyday, you will like them to have it synced everyday. I do ;)¬†\u003c/p\u003e\n\u003cp\u003e¬† Github introduced a feature called \u003ca href=\"https://docs.github.com/en/github/collaborating-with-pull-requests/working-with-forks/syncing-a-fork\"\u003efetch upstream\u003c/a\u003e this year to solve this issue. But in this case you need to click on the fetch upstream button by yourself, this article is for the lazy ones who want it to be done automatically.¬†\u003c/p\u003e","title":"Automate fetch upstream using github actions"},{"content":"\nYou can make a great software but you have to choose 2 out of this above 3. There is no way to get around!\n","permalink":"http://localhost:1313/2021/05/cheap-fast-good.html","summary":"\u003cp\u003e\u003ca href=\"https://live.staticflickr.com/3055/2647397230_16b0828cc1.jpg\"\u003e\u003cimg loading=\"lazy\" src=\"https://live.staticflickr.com/3055/2647397230_16b0828cc1.jpg\"\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eYou can make a great software but you have to choose 2 out of this above 3. There is no way to get around!\u003c/strong\u003e\u003c/p\u003e","title":"Cheap Fast Good"},{"content":" class Node: def \\_\\_init\\_\\_(self, data): self.data=data self.nextNode=None class LinkedLIst: def \\_\\_init\\_\\_(self): self.head = None self.numberOFNodes=0 \\# Here we get o(1) constant running time complexity for insertion. def insert\\_start(self,data): self.numberOFNodes=self.numberOFNodes+1 new\\_node = Node(data) if not self.head: self.head=new\\_node else: new\\_node.nextNode=self.head self.head = new\\_node #Linear running time o(n) def insert\\_end(self,data): self.numberOFNodes=self.numberOFNodes+1 new\\_node=Node(data) actual\\_node=self.head while actual\\_node.nextNode is not None: actual\\_node=actual\\_node.nextNode actual\\_node.nextNode=new\\_node def size\\_of\\_list(self): actual\\_node = self.head while actual\\_node is not None: print(actual\\_node) actual\\_node=actual\\_node.nextNode def traverse(self): actual\\_node=self.head while actual\\_node is not None: print(actual\\_node.data) actual\\_node=actual\\_node.nextNode def deleteAtHead(self): self.head=self.head.nextNode self.numberOFNodes=self.numberOFNodes-1 def deleteAtTail(self): actual\\_node = self.head while actual\\_node.nextNode.nextNode is not None: actual\\_node=actual\\_node.nextNode actual\\_node.nextNode=None self.numberOFNodes=self.numberOFNodes-1 linked\\_list=LinkedLIst() linked\\_list.insert\\_start(4) linked\\_list.insert\\_start(3) linked\\_list.insert\\_start(\u0026#39;A String type\u0026#39;) linked\\_list.insert\\_start(1.232) linked\\_list.insert\\_end(12.232) linked\\_list.traverse() print(\u0026#39;Deleting at the front\u0026#39;) linked\\_list.deleteAtHead() linked\\_list.traverse() print(\u0026#39;Delete at the last position\u0026#39;) linked\\_list.deleteAtTail() linked\\_list.traverse() ","permalink":"http://localhost:1313/2021/01/python-linked-list-implementation.html","summary":"\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e  \nclass Node:  \n     def \\_\\_init\\_\\_(self, data):  \n         self.data=data  \n         self.nextNode=None  \n  \n  \n  \nclass LinkedLIst:  \n  \n    def \\_\\_init\\_\\_(self):  \n        self.head = None  \n  self.numberOFNodes=0  \n  \\# Here we get o(1) constant running time complexity for insertion.  \n  def insert\\_start(self,data):  \n  \n        self.numberOFNodes=self.numberOFNodes+1  \n  new\\_node = Node(data)  \n  \n        if not self.head:  \n            self.head=new\\_node  \n        else:  \n            new\\_node.nextNode=self.head  \n            self.head = new\\_node  \n #Linear running time o(n)  \n  def insert\\_end(self,data):  \n        self.numberOFNodes=self.numberOFNodes+1  \n  new\\_node=Node(data)  \n  \n        actual\\_node=self.head  \n  \n        while actual\\_node.nextNode is not None:  \n            actual\\_node=actual\\_node.nextNode  \n  \n        actual\\_node.nextNode=new\\_node  \n  \n    def size\\_of\\_list(self):  \n  \n        actual\\_node = self.head  \n  \n        while actual\\_node is not None:  \n            print(actual\\_node)  \n            actual\\_node=actual\\_node.nextNode  \n  \n    def traverse(self):  \n        actual\\_node=self.head  \n  \n        while actual\\_node is not None:  \n            print(actual\\_node.data)  \n            actual\\_node=actual\\_node.nextNode  \n  \n    def deleteAtHead(self):  \n  \n        self.head=self.head.nextNode  \n        self.numberOFNodes=self.numberOFNodes-1  \n  \n  def deleteAtTail(self):  \n  \n        actual\\_node = self.head  \n  \n        while actual\\_node.nextNode.nextNode is not None:  \n            actual\\_node=actual\\_node.nextNode  \n  \n        actual\\_node.nextNode=None  \n  self.numberOFNodes=self.numberOFNodes-1  \n  \n  \n  \nlinked\\_list=LinkedLIst()  \nlinked\\_list.insert\\_start(4)  \nlinked\\_list.insert\\_start(3)  \nlinked\\_list.insert\\_start(\u0026#39;A String type\u0026#39;)  \nlinked\\_list.insert\\_start(1.232)  \nlinked\\_list.insert\\_end(12.232)  \nlinked\\_list.traverse()  \n  \nprint(\u0026#39;Deleting at the front\u0026#39;)  \nlinked\\_list.deleteAtHead()  \nlinked\\_list.traverse()  \n  \nprint(\u0026#39;Delete at the last position\u0026#39;)  \nlinked\\_list.deleteAtTail()  \nlinked\\_list.traverse()\n\u003c/code\u003e\u003c/pre\u003e","title":"Python linked List implementation"},{"content":"¬†I had worked on spring framework extensively throughout my career. The one thing which I am always try to implement in any Spring project I work on is Custom annotation. Its a fancy stuff but useful in many ways.¬†Say you have numerous micro services (Duplicate code bases which will f*** you up) running on your cluster, the best and first thing you do is - Build a common library to push all your model classes, so called util package of your organization :p and the fancy stuffs¬†. I am fortunate that I get to do all these experiments early on my career. So lets start with the problem.\nWe have many micro services which are built on top of spring framework. We want to use a¬†common service bean in all our boot apps.¬†This bean should be enabled with @EnableMyBean annotation. Once the spring boot app loads it should intercept this annotation and inject our MyBean service to our Spring boot application. So the first step to do is create the annotation itself\nThe @Import is from¬†org.springframework.context.annotation package¬†You can find the documentation over here\nNext is the implementation of MyBeanSelector class. We can define it as follows.\nLets look at each components. First the importSelector interface. As the definition on the Spring document \u0026ldquo;Interface to be implemented by types that determine which @Configuration__¬†class(es) should be imported based on a given selection criteria, usually one or more annotation attributes.\u0026rdquo;¬†This class is accountable for which Bean should be injected¬†to the spring context. It has many other cool features as well. Say you want to read some property from the environment in which the common library is used. Ie, from the Yaml file of the spring boot app which is using your common library. Then you can implement EnvironmentAware Interface.¬†Once we do the above, next we can define the actual service class inside \u0026ldquo;com.commons.service\u0026rdquo;.¬†So now You can use @EnableMyBean on your main method of the spring boot application. And you can Autowire MyService class anywhere inside your application. At the time of start up spring would automatically detect the @EnableMyBean annotation and push the Service Bean to the app\u0026rsquo;s context.\n","permalink":"http://localhost:1313/2020/10/custom-annotations-in-spring-boot.html","summary":"\u003cp\u003e¬† ¬† ¬† ¬† ¬† ¬†I had worked on spring framework extensively throughout my career. The one thing which I am always try to implement in any Spring project I work on is Custom annotation. Its a fancy stuff but useful in many ways.¬†\u003c/p\u003e\n\u003cp\u003e¬† ¬† ¬† ¬† ¬†Say you have numerous micro services (Duplicate code bases which will f*** you up) running on your cluster, the best and first thing you do is - Build a common library to push all your model classes, so called util package of your organization :p and the fancy stuffs¬† . I am fortunate that I get to do all these experiments early on my career. So lets start with the problem.\u003c/p\u003e","title":"Custom annotations in Spring Boot"},{"content":"¬†When comes to any programming language what i check first is how to write a unit test on it.¬†\u0026ldquo;Coding is not difficult- Bill Gates\u0026rdquo; So what is difficult? I would say testing is difficult. Here is a basic example on how to test a small piece of python code.\nThe above snippet is a basic recursive program which will return the factorial of a number. Lets see how we can write a basic test case for this. I have my directory structure as follows.\nLets see the contents of n_factorial_tests.py.\nThe first line is on importing the program to the test class.¬†Next we are importing _unittest : T_his module provides a rich set of tools for constructing and¬†running tests. While defining a function you can see we have used an object \u0026ldquo;self\u0026rdquo;. This used to represent an instance of a class. Here it means accessing the contents of unittest.TestCase which is being inherited to this class. Now we can access the functions defined unittest.TestCase¬†module. Because we have inherited that to our test class. self.assertEqual(n_factorial.factorial(5),120) : This is the statement where we assert for our expectation vs the actual value. If you run this on PyCharm we can see the below. Finally i wrote a python code and tested it¬†‚ù§Ô∏è\n","permalink":"http://localhost:1313/2020/09/what-i-found-on-python-basics-1.html","summary":"\u003cp\u003e¬†When comes to any programming language what i check first is how to write a unit test on it.¬†\u003c/p\u003e\n\u003cp\u003e¬† ¬†\u003cem\u003e\u0026ldquo;Coding is not difficult- Bill Gates\u0026rdquo;\u003c/em\u003e So what is difficult? I would say testing is difficult. Here is a basic example on how to test a small piece of python code.\u003c/p\u003e\n\u003cp\u003e¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† The above snippet is a basic recursive program which will return the factorial of a number. Lets see how we can write a basic test case for this. I have my directory structure as follows.\u003c/p\u003e","title":"Python Unit Test: Basics 1"}]